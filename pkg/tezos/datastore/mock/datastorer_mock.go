// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/guillaumedebavelaere/tezos-delegation/pkg/tezos/datastore (interfaces: Datastorer)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/tezos/datastore/mock/datastorer_mock.go -package=mock_datastorer github.com/guillaumedebavelaere/tezos-delegation/pkg/tezos/datastore Datastorer
//
// Package mock_datastorer is a generated GoMock package.
package mock_datastorer

import (
	context "context"
	reflect "reflect"

	model "github.com/guillaumedebavelaere/tezos-delegation/pkg/tezos/datastore/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDatastorer is a mock of Datastorer interface.
type MockDatastorer struct {
	ctrl     *gomock.Controller
	recorder *MockDatastorerMockRecorder
}

// MockDatastorerMockRecorder is the mock recorder for MockDatastorer.
type MockDatastorerMockRecorder struct {
	mock *MockDatastorer
}

// NewMockDatastorer creates a new mock instance.
func NewMockDatastorer(ctrl *gomock.Controller) *MockDatastorer {
	mock := &MockDatastorer{ctrl: ctrl}
	mock.recorder = &MockDatastorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastorer) EXPECT() *MockDatastorerMockRecorder {
	return m.recorder
}

// GetDelegations mocks base method.
func (m *MockDatastorer) GetDelegations(arg0 context.Context, arg1, arg2, arg3 int) ([]*model.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations.
func (mr *MockDatastorerMockRecorder) GetDelegations(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDatastorer)(nil).GetDelegations), arg0, arg1, arg2, arg3)
}

// GetDelegationsCount mocks base method.
func (m *MockDatastorer) GetDelegationsCount(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsCount indicates an expected call of GetDelegationsCount.
func (mr *MockDatastorerMockRecorder) GetDelegationsCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsCount", reflect.TypeOf((*MockDatastorer)(nil).GetDelegationsCount), arg0, arg1)
}

// GetLatestDelegation mocks base method.
func (m *MockDatastorer) GetLatestDelegation(arg0 context.Context) (*model.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDelegation", arg0)
	ret0, _ := ret[0].(*model.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDelegation indicates an expected call of GetLatestDelegation.
func (mr *MockDatastorerMockRecorder) GetLatestDelegation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDelegation", reflect.TypeOf((*MockDatastorer)(nil).GetLatestDelegation), arg0)
}

// StoreDelegations mocks base method.
func (m *MockDatastorer) StoreDelegations(arg0 context.Context, arg1 []*model.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDelegations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreDelegations indicates an expected call of StoreDelegations.
func (mr *MockDatastorerMockRecorder) StoreDelegations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDelegations", reflect.TypeOf((*MockDatastorer)(nil).StoreDelegations), arg0, arg1)
}
